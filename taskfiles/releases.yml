version: '3'

tasks:
  helmfile:
    interactive: true
    silent: true
    desc: "Wrapper Task for Helmfile used by other Tasks"
    cmds:
      - |
        set - {{ .CLI_ARGS }}
        # Store original IFS
        OLD_IFS="$IFS"

        # Validate required environment variables
        # Show usage if needed
        usage() {
            printf "Invalid usage.\n"
            printf "\n"
            printf "Arguments:\n"
            printf "<command> The Helmfile command to use. "
            if [ -z "$COMMAND" ]; then
                printf "‚ùå Not specified\n"
            else
                printf "‚úÖ Current value is %s\n" "$COMMAND"
            fi
            
            printf "<namespace> Must be a valid namespace or 'all'. "
            if [ -z "$NAMESPACE" ]; then
                printf "‚ùå Not specified (defaults to 'all')\n"
            else
                printf "Current value is %s. " "$NAMESPACE"
                if [ "$NAMESPACE" = "all" ]; then
                    printf "‚úÖ Using root helmfile.yaml\n"
                elif [ ! -f "$NAMESPACE_FILE_PATH" ]; then
                    printf "‚ùå Expected file %s does not exist\n" "$NAMESPACE_FILE_PATH"
                else
                    printf "‚úÖ Expected file %s exists\n" "$NAMESPACE_FILE_PATH"
                fi
            fi
            
            printf "[release-name] Optionally select a single release\n"
            exit 1
        }

        # Parse command and build selector
        COMMAND="${1:-}"
        if [[ -z "$COMMAND" ]]; then
            printf "‚ùå Error: Command argument is required\n"
            usage
        fi
        shift

        SELECTOR=""
        NAMESPACE="all"  # Default to "all"

        # First argument without = is treated as namespace
        if [[ -n "${1:-}" ]] && [[ "$1" =~ ^[a-z0-9][a-z0-9-]*[a-z0-9]$|^all$ ]]; then
            NAMESPACE="$1"
            if [[ "$NAMESPACE" != "all" ]]; then
                SELECTOR="--selector=namespace=$NAMESPACE"
            fi
            shift

            # If we had a namespace, second argument without = is treated as release name
            if [[ -n "${1:-}" ]] && [[ "$1" =~ ^[a-z0-9][a-z0-9-]*[a-z0-9]$ ]]; then
                SELECTOR="${SELECTOR:+$SELECTOR,}name=$1"
                shift
            fi
        fi

        # Handle any remaining arguments as raw selectors
        if (( $# > 0 )); then
            if [[ -n "$SELECTOR" ]]; then
                SELECTOR="${SELECTOR},$*"
            else
                SELECTOR="--selector=$*"
            fi
        fi

        # Set error handling
        set -e

        # Configure debug logging
        DEBUG_LOGS=""
        if [[ "${LAUNCHPAD_VERBOSE_LOGS:-}" == "true" ]]; then
            DEBUG_LOGS="--debug"
            printf "üîç Debug logging enabled\n"
        fi

        NAMESPACES_DIR="${NAMESPACES_DIR:-namespaces}"
        if [[ "$NAMESPACE" = "all" ]]; then
            NAMESPACE_FILE_PATH="helmfile.yaml"
        else
            NAMESPACE_FILE_PATH="${NAMESPACES_DIR}/${NAMESPACE}.yaml"
        fi

        # Validate namespace file exists
        if [[ ! -f "$NAMESPACE_FILE_PATH" ]]; then
            printf "‚ùå Error: Namespace file %s does not exist\n" "$NAMESPACE_FILE_PATH"
            usage
        fi

        # Warn about sealed-secrets modifications
        if [[ "${NAMESPACE:-}" == "sealed-secrets" ]] && [[ "$COMMAND" != "status" ]]; then
            printf "‚ö†Ô∏è  WARNING: Sealed Secrets Modification\n"
            printf "You are about to modify the %s namespace.\n" "$NAMESPACE"
            printf "Deleting the sealed-secrets controller will render all existing SealedSecrets invalid.\n"
            printf "Make sure you have backup copies of all your secrets.\n"
            if ! gum confirm --prompt.foreground "#ff0000" "Are you sure you want to continue?"; then
                usage
            fi
        fi

        # Execute helmfile command
        COMMON_ARGS=(
          ${DEBUG_LOGS:+"$DEBUG_LOGS"}
          --interactive
          -f "$NAMESPACE_FILE_PATH"
          ${SELECTOR:+"$SELECTOR"}
          "$COMMAND"
          "$@"
        )

        if [[ "$COMMAND" == "apply" ]]; then
            printf "‚ö†Ô∏è  IMPORTANT: To pull the latest charts, be sure to run releases:update-deps before releases:apply\n"
            printf "\n"
            (
              set -x
              helmfile "${COMMON_ARGS[@]}" --skip-deps
            )
        else
            (
              set -x
              helmfile "${COMMON_ARGS[@]}"
            )
        fi

        # Restore original IFS
        IFS="$OLD_IFS"

  status:
    interactive: true
    desc: "View status for release(s). Usage: releases:status"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "status {{.CLI_ARGS}}"

  apply:
    interactive: true
    desc: "Apply current helmfile state. Usage: releases:apply"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "apply {{.CLI_ARGS}}"

  destroy:
    interactive: true
    desc: "Destroy release(s) for a cluster namespace. Usage: releases:destroy -- <namespace> [release-name]"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "destroy {{.CLI_ARGS}}"

  list:
    interactive: true
    desc: "List release(s) present in the helmfile. Usage: releases:list"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "list {{.CLI_ARGS}}"

  update-deps:
    interactive: true
    desc: "Clear cache and update all repo and chart dependencies. Usage: releases:update-deps"
    cmds:
      - helmfile cache cleanup
      - task: helmfile
        vars:
          CLI_ARGS: "deps {{.CLI_ARGS}}"
