version: '3'

tasks:
  helmfile:
    interactive: true
    silent: true
    desc: "Wrapper Task for Helmfile used by other Tasks"
    cmds:
      - |
        set - {{ .CLI_ARGS }}
        # Store original IFS
        OLD_IFS="$IFS"

        # Validate required environment variables
        # Show usage if needed
        usage() {
            echo "Invalid usage."
            echo
            echo "Arguments:"
            echo -n "<command> The Helmfile command to use. "
            if [ -z "$COMMAND" ]; then
                echo "‚ùå Not specified"
            else
                echo "‚úÖ Current value is $COMMAND"
            fi
            
            echo -n "<namespace> Must be a valid namespace. "
            if [ -z "$NAMESPACE" ]; then
                echo "‚ùå Not specified"
            else
                echo -n "Current value is $NAMESPACE. "
                if [ ! -f "$NAMESPACE_FILE_PATH" ]; then
                    echo "‚ùå Expected file $NAMESPACE_FILE_PATH does not exist"
                else
                    echo "‚úÖ Expected file $NAMESPACE_FILE_PATH exists"
                fi
            fi
            
            echo "[release-name] Optionally select a single release"
            exit 1
        }

        # Parse command and build selector
        COMMAND="${1:-}"
        if [[ -z "$COMMAND" ]]; then
            echo "‚ùå Error: Command argument is required"
            usage
        fi
        shift

        SELECTOR=""
        # Build selector from namespace and release name if provided
        if [[ -n "${1:-}" ]] && [[ ! "$1" =~ '=' ]]; then
            NAMESPACE="$1"
            SELECTOR="--selector=namespace=$NAMESPACE"
            shift
            
            if [[ -n "${1:-}" ]] && [[ ! "$1" =~ '=' ]]; then
                SELECTOR="${SELECTOR},name=$1"
                shift
            fi
        # Handle raw selector arguments
        elif (( $# > 0 )); then
            SELECTOR="--selector=$*"
        fi

        # Set error handling
        set -e

        # Configure debug logging
        DEBUG_LOGS=""
        if [[ "${LAUNCHPAD_VERBOSE_LOGS:-}" == "true" ]]; then
            DEBUG_LOGS="--debug"
            echo "üîç Debug logging enabled"
        fi

        NAMESPACE_FILE_PATH="namespaces/${NAMESPACE}.yaml"

        # Validate namespace file exists
        if [[ ! -f "$NAMESPACE_FILE_PATH" ]]; then
            echo "‚ùå Error: Namespace file $NAMESPACE_FILE_PATH does not exist"
            usage
        fi

        # Warn about sealed-secrets modifications
        if [[ "${NAMESPACE:-}" == "sealed-secrets" ]] && [[ "$COMMAND" != "status" ]]; then
            echo "‚ö†Ô∏è  WARNING: Sealed Secrets Modification"
            echo "You are about to modify the $NAMESPACE namespace."
            echo "Deleting the sealed-secrets controller will render all existing SealedSecrets invalid."
            echo "Make sure you have backup copies of all your secrets."
            if ! gum confirm --prompt.foreground "#ff0000" "Are you sure you want to continue?"; then
                usage
            fi
        fi

        # Execute helmfile command
        if [[ "$COMMAND" == "apply" ]]; then
            echo "‚ö†Ô∏è  IMPORTANT: To pull the latest charts, be sure to run releases:update-deps before releases:apply"
            echo
            (
              set -x
              helmfile ${DEBUG_LOGS:+"$DEBUG_LOGS"} \
                --interactive \
                -f "$NAMESPACE_FILE_PATH" \
                --skip-deps \
                ${SELECTOR:+"$SELECTOR"} \
                "$COMMAND" \
                "$@"
            )
        else
            (
              set -x
              helmfile ${DEBUG_LOGS:+"$DEBUG_LOGS"} \
                --interactive \
                -f "$NAMESPACE_FILE_PATH" \
                ${SELECTOR:+"$SELECTOR"} \
                "$COMMAND" \
                "$@"
            )
        fi

        # Restore original IFS
        IFS="$OLD_IFS"

  status:
    interactive: true
    desc: "View status for release(s). Usage: releases:status"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "status {{.CLI_ARGS}}"

  apply:
    interactive: true
    desc: "Apply current helmfile state. Usage: releases:apply"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "apply {{.CLI_ARGS}}"

  destroy:
    interactive: true
    desc: "Destroy release(s) for a cluster namespace. Usage: releases:destroy -- <namespace> [release-name]"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "destroy {{.CLI_ARGS}}"

  list:
    interactive: true
    desc: "List release(s) present in the helmfile. Usage: releases:list"
    cmds:
      - task: helmfile
        vars:
          CLI_ARGS: "list {{.CLI_ARGS}}"

  update-deps:
    interactive: true
    desc: "Clear cache and update all repo and chart dependencies. Usage: releases:update-deps"
    cmds:
      - helmfile cache cleanup
      - task: helmfile
        vars:
          CLI_ARGS: "deps {{.CLI_ARGS}}"
